import AFOM from '../tools/AFOM';
import AFOMPresentation from '../tools/AFOMPresentation';
import ArbreProbleme from '../tools/ArbreProbleme';
import ArbreProblemePresentation from '../tools/ArbreProblemePresentation';
import CadreLogique from '../tools/CadreLogique';
import CadreLogiquePresentation from '../tools/CadreLogiquePresentation';
import DiagrammeGantt from '../tools/DiagrammeGantt';
import DiagrammeGanttPresentation from '../tools/DiagrammeGanttPresentation';
import AnalyseParties from '../tools/AnalyseParties';
import AnalysePartiesPresentation from '../tools/AnalysePartiesPresentation';
import AnalyseGenre from '../tools/AnalyseGenre';
import AnalyseGenrePresentation from '../tools/AnalyseGenrePresentation';
import CarteMentale from '../tools/CarteMentale';
import CarteMentalePresentation from '../tools/CarteMentalePresentation';
import AnalyseMulticriteres from '../tools/AnalyseMulticriteres';
import AnalyseMulticriteresPresentation from '../tools/AnalyseMulticriteresPresentation';

const toolsConfig = {
   'afom': { 
       id: 'afom', 
       name: 'AFOM', 
       icon: 'üìä',
       description: 'Analyse des Forces, Faiblesses, Opportunit√©s et Menaces',
       component: AFOM,
       presentation: AFOMPresentation,
       category: 'analyse',
       tags: ['strat√©gie', 'diagnostic', 'planification']
   },
   'arbre-problemes': { 
       id: 'arbre-problemes', 
       name: 'Arbre √† probl√®mes', 
       icon: 'üå≥',
       description: 'Visualisation hi√©rarchique des causes et cons√©quences',
       component: ArbreProbleme,
       presentation: ArbreProblemePresentation,
       category: 'analyse',
       tags: ['diagnostic', 'causalit√©', 'probl√©matique']
   },
   'cadre-logique': { 
       id: 'cadre-logique', 
       name: 'Cadre logique', 
       icon: 'üìã',
       description: 'Structuration logique des objectifs et r√©sultats',
       component: CadreLogique,
       presentation: CadreLogiquePresentation,
       category: 'planification',
       tags: ['objectifs', 'indicateurs', 'r√©sultats']
   },
   'gantt': {
       id: 'gantt',
       name: 'Diagramme de Gantt',
       icon: 'üìÖ', 
       description: 'Planification temporelle des activit√©s du projet',
       component: DiagrammeGantt,
       presentation: DiagrammeGanttPresentation,
       category: 'planification',
       tags: ['planning', 'temps', 'activit√©s']
   },
   'parties-prenantes': {
       id: 'parties-prenantes',
       name: 'Analyse des parties prenantes',
       icon: 'üë•',
       description: 'Cartographie et analyse des acteurs du projet', 
       component: AnalyseParties,
       presentation: AnalysePartiesPresentation,
       category: 'analyse',
       tags: ['acteurs', 'stakeholders', 'partenaires']
   },
   'analyse-genre': {
       id: 'analyse-genre',
       name: 'Analyse genre',
       icon: '‚öñÔ∏è',
       description: '√âvaluation des aspects li√©s au genre dans le projet',
       component: AnalyseGenre,
       presentation: AnalyseGenrePresentation,
       category: 'analyse',
       tags: ['√©galit√©', 'inclusion', 'social']
   },
   'carte-mentale': {
       id: 'carte-mentale',
       name: 'Carte mentale',
       icon: 'üß†',
       description: 'Repr√©sentation visuelle des id√©es et concepts',
       component: CarteMentale,
       presentation: CarteMentalePresentation,
       category: 'ideation',
       tags: ['brainstorming', 'cr√©ativit√©', 'organisation']
   },
   'analyse-multicriteres': {
       id: 'analyse-multicriteres',
       name: 'Analyse multicrit√®res',
       icon: 'üéØ',
       description: '√âvaluation comparative selon plusieurs crit√®res',
       component: AnalyseMulticriteres,
       presentation: AnalyseMulticriteresPresentation,
       category: 'decision',
       tags: ['d√©cision', '√©valuation', 'comparaison']
   }
};

export const getToolConfig = (toolId) => toolsConfig[toolId] || null;

export const getTools = () => Object.values(toolsConfig);

export const getToolName = (toolId) => toolsConfig[toolId]?.name || 'Outil inconnu';

export const getToolsByCategory = (category) => 
   Object.values(toolsConfig).filter(tool => tool.category === category);

export const searchTools = (keyword) => {
   const searchTerm = keyword.toLowerCase();
   return Object.values(toolsConfig).filter(tool => 
       tool.name.toLowerCase().includes(searchTerm) ||
       tool.description.toLowerCase().includes(searchTerm) ||
       tool.tags.some(tag => tag.toLowerCase().includes(searchTerm))
   );
};

export const getCategories = () => 
   Array.from(new Set(Object.values(toolsConfig).map(tool => tool.category)));

export const getTags = () => 
   Array.from(new Set(Object.values(toolsConfig).flatMap(tool => tool.tags)));

export const isToolAvailable = (toolId) => toolId in toolsConfig;

export const loadTool = async (toolId) => {
   try {
       const toolConfig = toolsConfig[toolId];
       if (!toolConfig) {
           throw new Error(`Outil ${toolId} non trouv√©`);
       }
       return toolConfig.component;
   } catch (error) {
       console.error(`Erreur lors du chargement de l'outil ${toolId}:`, error);
       return null;
   }
};

export const loadToolPresentation = async (toolId) => {
   try {
       const toolConfig = toolsConfig[toolId];
       if (!toolConfig) {
           throw new Error(`Pr√©sentation de l'outil ${toolId} non trouv√©e`);
       }
       return toolConfig.presentation;
   } catch (error) {
       console.error(`Erreur lors du chargement de la pr√©sentation ${toolId}:`, error);
       return null;
   }
};

export default toolsConfig;